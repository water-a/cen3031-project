{"version":3,"sources":["img/logo.png","pages/Orders.js","pages/Messages.js","components/ItemEdit.js","pages/Settings.js","routes/DashboardRouter/index.js","routes/DashboardRouter/DashboardRouter.js","routes/AppRouter.js","index.js"],"names":["module","exports","__webpack_require__","p","Orders","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_getStatusText","status","_toggleOrderStatus","order","event","preventDefault","fetch","concat","id","method","headers","Content-type","body","JSON","stringify","then","_fetchOrders","bind","assertThisInitialized","state","orders","_this2","response","json","console","log","setState","_this3","react_default","a","createElement","className","length","map","key","style","maxHeight","alt","src","material","name","size","height","width","contact","Fragment","firstName","lastName","email","shippingAddress","line1","line2","city","country","postal","href","onClick","Component","Messages","messages","message","orderId","issue","createdAt","ItemEdit","items","display","flexDirection","margin","title","fontSize","marginRight","add","overflowY","value","index","marginBottom","render","delete","swal","withReactContent","Swal","Toast","mixin","toast","position","showConfirmButton","timer","Settings","updateContent","Content-Type","content","refs","fire","type","refresh","about","faq","materials","sizes","max","maxSize","maxWidth","justifyContent","components_ItemEdit","item","costPerArea","input","confirmButtonText","showCancelButton","progressSteps","queue","result","answers","_id","onSubmit","ref","minHeight","DashboardRouter","react_router_dom","to","logo","react_router","exact","path","match","component","AppRouter","ReactDOM","routes_AppRouter","document","getElementById"],"mappings":"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","file":"static/js/main.dd19614d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dac70980.png\";","import React, { Component } from 'react';\n\nclass Orders extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            orders: []\n        }\n    }\n    componentDidMount(){\n        this._fetchOrders();\n    }\n    _fetchOrders(){\n        fetch('/api/orders')\n            .then(response => response.json())\n            .then(json => {\n                console.log(json);\n                this.setState({\n                    orders: json\n                });\n            });\n    }\n    _getStatusText = status => {\n        switch (status){\n            case 2:\n                return \"Order completed\";\n            case 1:\n                return \"Paid\";\n            default:\n                return \"Pending payment\";\n        }\n    }\n    _toggleOrderStatus = (order, event) => {\n        event.preventDefault();\n        fetch(`/api/orders/${order.id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n                status: order.status === 1 ? 2 : 1\n            })\n        })\n            .then(this._fetchOrders.bind(this));\n    }\n    render(){\n        return (\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <h2 className=\"card-title\">Orders List</h2>\n                </div>\n                <div className=\"card-body\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Order ID</th>\n                                <th>Preview</th>\n                                <th>Status</th>\n                                <th>Material</th>\n                                <th>Size</th>\n                                <th>Contact</th>\n                                <th>Address</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.orders.length === 0 ? \n                            <tr><td>No orders available</td></tr> : \n                            this.state.orders.map(order => (\n                                <tr key={order.id}>\n                                    <td>{order.id}</td>\n                                    <td><img style={{maxHeight: \"60px\"}} alt=\"Preview\" src={`/api/orders/${order.id}/preview`} /></td>\n                                    <td>{this._getStatusText(order.status)}</td>\n                                    <td>{order.material.name}</td>\n                                    <td>{`${order.size.height}x${order.size.width}`}</td>\n                                    <td>\n                                        {order.contact ?\n                                            <>\n                                                {order.contact.firstName + ' ' + order.contact.lastName}<br />\n                                                {order.contact.email}\n                                            </> :\n                                            'Not available'\n                                        }\n                                    </td>\n                                    <td>\n                                        {order.shippingAddress ?\n                                            <>\n                                                {order.shippingAddress.line1}<br />\n                                                {order.shippingAddress.line2 && <>{order.shippingAddress.line2}<br /></>}\n                                                {order.shippingAddress.city}, {order.shippingAddress.country} {order.shippingAddress.postal}\n                                            </> :\n                                            'Not available'\n                                        }\n                                    </td>\n                                    <td>\n                                        <a href={`/api/orders/${order.id}/preview?download`}>Download</a>\n                                        {order.status > 0 && \n                                            <>\n                                                <br />\n                                                <a href=\"#toggle\" onClick={this._toggleOrderStatus.bind(this, order)}>\n                                                    Mark {(order.status === 1 ? '' : 'not ') + 'completed'}\n                                                </a>\n                                            </>\n                                        }\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Orders;","import React, { Component } from 'react';\n\nclass Messages extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            messages: []\n        };\n    }\n    componentDidMount(){\n        fetch('/api/contact')\n            .then(response => response.json())\n            .then(json => {\n                if (json.status === 'success'){\n                    this.setState({\n                        messages: json.response\n                    });\n                }\n            });\n    }\n    render(){\n        return (\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <h2 className=\"card-title\">Messages</h2>\n                </div>\n                <div className=\"card-body\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Email</th>\n                                <th>Order Id</th>\n                                <th>Message</th>\n                                <th>Timestamp</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.messages.length === 0 ? \n                            <tr><td>No messages available</td></tr> : \n                            this.state.messages.map(message => (\n                                <tr>\n                                    <td>{message.email}</td>\n                                    <td>{message.orderId.length ? message.orderId : 'Not available'}</td>\n                                    <td>{message.issue}</td>\n                                    <td>{message.createdAt}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Messages;","import React, { Component } from 'react';\n\nclass ItemEdit extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            items: this.props.items\n        };\n    }\n    componentWillReceiveProps(props){\n        this.setState({\n            items: props.items\n        });\n    }\n    render(){\n        return (\n            <div style={this.props.style} className=\"Items\">\n                <div style={{display: 'flex', flexDirection: 'row'}}>\n                    <h3 style={{margin: 0}}>{this.props.title}</h3>\n                    <button \n                        style={{\n                            width: '100px',\n                            fontSize: '1rem',\n                            margin: 'auto',\n                            marginRight: '0'\n                        }} \n                        className=\"btn btn-success btn-block\"\n                        onClick={this.props.add}\n                    >Add</button>\n                </div>\n                <hr />\n                <div style={{height: '200px', overflowY: 'auto'}}>\n                    {this.state.items.length > 0 ?\n                    this.state.items.map((value, index) => <li key={index} style={{display: 'flex', flexDirection: 'row', marginBottom: '10px'}}>\n                        {this.props.render ? this.props.render(value, index) : <span style={{margin: 0}}>{value}</span>}\n                        <button \n                            style={{\n                                width: '100px',\n                                fontSize: '1rem',\n                                margin: 'auto',\n                                marginRight: '0'\n                            }}\n                            className=\"btn btn-danger btn-block\" \n                            onClick={this.props.delete.bind(this, value, index)}\n                        >Delete</button>\n                    </li>):\n                    <span>No items available</span>}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ItemEdit;","import React, { Component } from 'react';\nimport ItemEdit from '../components/ItemEdit';\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst swal = withReactContent(Swal);\nconst Toast = swal.mixin({\n    toast: true,\n    position: 'top-end',\n    showConfirmButton: false,\n    timer: 3000\n});\n\nclass Settings extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            about: '',\n            faq: '',\n            materials: [],\n            sizes: [],\n            max: {\n                height: 0,\n                width: 0\n            }\n        }\n    }\n    componentDidMount(){\n        this.refresh();\n    }\n    refresh(){\n        fetch('/api/options')\n            .then(response => response.json())\n            .then(json => {\n                let response = json.response;\n                this.setState({\n                    about: response.content.about,\n                    faq: response.content.faq,\n                    materials: response.materials,\n                    sizes: response.sizes,\n                    max: response.maxSize\n                });\n                this.refs.maxHeight.value = this.state.max.height;\n                this.refs.maxWidth.value = this.state.max.width;\n                this.refs.about.value = this.state.about;\n                this.refs.faq.value = this.state.faq;\n            });\n    }\n    updateContent = name => {\n        fetch(`/api/options/content/${name}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                content: this.refs[name].value\n            })\n        })\n            .then(() => {\n                Toast.fire({\n                    type: 'success',\n                    title: `Sucessfully updated ${name}!`\n                });\n                this.refresh();\n            });\n    }\n    render(){\n        return (\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <h2 className=\"card-title\">Settings</h2>\n                </div>\n                <div className=\"card-body\">\n                    <h3>General</h3>\n                    <section style={{display: 'flex', justifyContent: 'space-around'}}>\n                        <ItemEdit\n                            style={{width: '30%'}}\n                            title=\"Materials\"\n                            items={this.state.materials}\n                            render={item => {\n                                return <span>{item.name} - {item.costPerArea}/in<sup>2</sup></span>\n                            }}\n                            add={() => {\n                                swal.mixin({\n                                    input: 'text',\n                                    confirmButtonText: 'Next &rarr;',\n                                    showCancelButton: true,\n                                    progressSteps: ['1', '2']\n                                }).queue([\n                                    'What kind of material do you want to add?',\n                                    'What is the cost per area?',\n                                ]).then(result => {\n                                    if (result.value){\n                                        let answers = result.value;\n                                        let material = answers[0];\n                                        let costPerArea = answers[1];\n                                        fetch(`/api/options/materials/${material}`, {\n                                            method: 'POST',\n                                            headers: {\n                                                'Content-type': 'application/json'\n                                            },\n                                            body: JSON.stringify({\n                                                costPerArea\n                                            })\n                                        })\n                                            .then(response => response.json())\n                                            .then(json => {\n                                                if (json.status === 'success'){\n                                                    Toast.fire({\n                                                        type: 'success',\n                                                        title: 'Added successfully!'\n                                                    });\n                                                    this.refresh();\n                                                } else {\n                                                    swal.fire('Error', json.message, 'error');\n                                                }\n                                            });\n                                    }\n                                });\n                            }}\n                            delete={value => {\n                                fetch(`/api/options/materials/${value._id}`, {\n                                    method: 'DELETE'\n                                })\n                                    .then(response => response.json())\n                                    .then(json => {\n                                        if (json.status === 'success'){\n                                            Toast.fire({\n                                                type: 'success',\n                                                title: 'Deleted successfully!'\n                                            });\n                                            this.refresh();\n                                        } else {\n                                            swal.fire('Error', json.message, 'error');\n                                        }\n                                    });\n                            }}\n                        />\n                        <ItemEdit\n                            style={{width: '30%'}}\n                            title=\"Sizes\"\n                            items={this.state.sizes}\n                            render={item => {\n                                return <span >{item.height}x{item.width}</span>\n                            }}\n                            add={() => {\n                                swal.mixin({\n                                    input: 'text',\n                                    confirmButtonText: 'Next &rarr;',\n                                    showCancelButton: true,\n                                    progressSteps: ['1', '2']\n                                }).queue([\n                                    'What is the height?',\n                                    'What is the width?',\n                                ]).then(result => {\n                                    if (result.value){\n                                        let answers = result.value;\n                                        let height = answers[0];\n                                        let width = answers[1];\n                                        fetch(`/api/options/sizes/${height}/${width}`, {\n                                            method: 'POST'\n                                        })\n                                            .then(response => response.json())\n                                            .then(json => {\n                                                if (json.status === 'success'){\n                                                    Toast.fire({\n                                                        type: 'success',\n                                                        title: 'Added successfully!'\n                                                    });\n                                                    this.refresh();\n                                                } else {\n                                                    swal.fire('Error', json.message, 'error');\n                                                }\n                                            });\n                                    }\n                                });\n                            }}\n                            delete={value => {\n                                fetch(`/api/options/sizes/${value.height}/${value.width}`, {\n                                    method: 'DELETE'\n                                })\n                                    .then(response => response.json())\n                                    .then(json => {\n                                        if (json.status === 'success'){\n                                            Toast.fire({\n                                                type: 'success',\n                                                title: 'Deleted successfully!'\n                                            });\n                                            this.refresh();\n                                        } else {\n                                            swal.fire('Error', json.message, 'error');\n                                        }\n                                    });\n                            }}\n                        />\n                        <form \n                            onSubmit={event => {\n                                event.preventDefault();\n                                fetch('/api/options/sizes/max', {\n                                    method: 'PUT',\n                                    headers: {\n                                        'Content-Type': 'application/json'\n                                    },\n                                    body: JSON.stringify({\n                                        height: this.refs.maxHeight.value,\n                                        width: this.refs.maxWidth.value\n                                    })\n                                })\n                                    .then(() => {\n                                        Toast.fire({\n                                            type: 'success',\n                                            title: 'Successfully updated!'\n                                        });\n                                        this.refresh();\n                                    });\n                            }} \n                            style={{width: '30%'}}\n                        >\n                            <h3 style={{margin: 0}}>Maximum height and width</h3>\n                            <div className=\"form-group\">\n                                <label>Height</label>\n                                <input type=\"number\" ref=\"maxHeight\" className=\"form-control\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Width</label>\n                                <input type=\"number\" ref=\"maxWidth\" className=\"form-control\" />\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\">Update</button>\n                        </form>\n                    </section>\n                    <h3>Content</h3>\n                    <section>\n                        <div className=\"form-group\">\n                            <label>About</label>\n                            <textarea ref=\"about\" style={{minHeight: '200px'}} className=\"form-control\" />\n                        </div>\n                        <button onClick={this.updateContent.bind(this, 'about')} className=\"btn btn-primary btn-block\">Update About</button>\n                        <div className=\"form-group\">\n                            <label>FAQ</label>\n                            <textarea ref=\"faq\" style={{minHeight: '200px'}} className=\"form-control\" />\n                        </div>\n                        <button onClick={this.updateContent.bind(this, 'faq')} className=\"btn btn-primary btn-block\">Update FAQ</button>\n                    </section>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Settings;","import DashboardRouter from './DashboardRouter';\n\nexport default DashboardRouter;","import React from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport Orders from '../../pages/Orders';\nimport Messages from '../../pages/Messages';\nimport Settings from '../../pages/Settings';\nimport logo from '../../img/logo.png';\nimport './DashboardRouter.css';\n\nconst DashboardRouter = (props) => (\n    <div className=\"wrapper\">\n        <div className=\"sidebar\">\n            <div className=\"logo\">\n                <Link to=\"/dashboard\" className=\"simple-text logo-normal\">\n                    <img alt=\"Petree's Prints\" height=\"35\" width=\"35\" src={logo} />\n                    Petree's Prints\n                </Link>\n            </div>\n            <div className=\"sidebar-wrapper\">\n                <ul className=\"nav\">\n                    <li><Link to=\"/dashboard\"><i className=\"now-ui-icons design_bullet-list-67\"></i>Orders</Link></li>\n                    <li><Link to=\"/dashboard/messages\"><i className=\"now-ui-icons ui-2_chat-round\"></i>Messages</Link></li>\n                    <li><Link to=\"/dashboard/settings\"><i className=\"now-ui-icons loader_gear\"></i>Settings</Link></li>\n                </ul>\n            </div>\n        </div>\n        <div className=\"main-panel\">\n            <div className=\"content\">\n                <Route exact path={props.match.path} component={Orders} />\n                <Route exact path={`${props.match.path}messages`} component={Messages} />\n                <Route exact path={`${props.match.path}settings`} component={Settings} />\n            </div>\n        </div>\n    </div>\n);\n\nexport default DashboardRouter;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport DashboardRouter from './DashboardRouter/index.js';\n\nconst AppRouter = () => (\n    <Router>\n        <Switch>\n            <Route path='/dashboard/' component={DashboardRouter}/>\n        </Switch>\n    </Router>\n);\nexport default AppRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppRouter from './routes/AppRouter.js';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n"],"sourceRoot":""}